package main

import (
	"github.com/code-chimp/htmx-go-example/ui"
	"html/template"
	"io/fs"
	"path/filepath"
	"strings"
	"time"
)

// humanDate returns a human readable string representation of a time.Time object.
// The format used is "02 Jan 2006 at 15:04".
func humanDate(t time.Time) string {
	return t.Format("02 Jan 2006 at 15:04")
}

// functions is a map of functions that can be used in templates.
// It currently includes the humanDate function.
var functions = template.FuncMap{
	"humanDate": humanDate,
}

// newTemplateCache creates a template cache by parsing all .go.tmpl files
// under the ./ui/html/pages directory and its subdirectories. The keys in the
// cache map are generated by replacing slashes with periods in the relative
// file paths of the templates.
//
// Returns:
//   - map[string]*template.Template: A map where the keys are the modified file
//     paths and the values are the parsed templates.
//   - error: An error if any occurs during the directory traversal or template parsing.
func newTemplateCache() (map[string]*template.Template, error) {
	cache := map[string]*template.Template{}

	// Retrieve all template files under the html/pages directory.
	pages, err := fs.Glob(ui.Files, "html/pages/**/*.tmpl")
	if err != nil {
		return nil, err
	}

	// Parse each template file and add it to the cache.
	for _, page := range pages {
		// the `base` template will execute pulling in content from partials and the current page
		pattern := []string{
			"html/layouts/base.go.tmpl", // Base layout template.
			"html/partials/*.tmpl",      // Partial templates.
			page,                        // Current page template.
		}

		// Parse the templates with the specified pattern and functions.
		ts, err := template.New(filepath.Base(page)).Funcs(functions).ParseFS(ui.Files, pattern...)
		if err != nil {
			return nil, err
		}

		// Generate the cache key by replacing slashes with periods in the file path.
		key := strings.ReplaceAll(strings.TrimPrefix(page, "html/pages/"), "/", ".")
		cache[key] = ts
	}

	return cache, nil
}
